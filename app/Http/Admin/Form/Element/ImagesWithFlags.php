<?php

namespace App\Http\Admin\Form\Element;

use App\Services\ImageOptimizer;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use SleepingOwl\Admin\Form\Element\File;
use SleepingOwl\Admin\Form\Element\Images;

/**
 * Class ImagesWithFlags
 *
 * Provides base Sleeping Owl Images form element functionality with visibility flag supporting
 *
 * It uses additional model "name"_visibility field, contains disabled objects
 *
 * @package App\Http\Admin\Form\Element
 */
class ImagesWithFlags extends Images
{
    protected $view = 'form.element.images-with-flags';

    /**
     * @param Request $request
     * @return void
     */
    public function afterSave(Request $request)
    {

        //
        parent::afterSave($request);
    }

    public function save(Request $request)
    {

        parent::save($request); // TODO: Change the autogenerated stub
        //--------- save hidden images list --------------
        $model = $this->getModel();
        $name = $this->getName();
        $flags_name = $name . "_visibility";
        //get disabled images
        $hidden = $request->get($name."_hidden","");
        $hidden = explode(",",$hidden);
        $hidden = array_values(array_intersect($model->$name,$hidden));
        //save
        $model->$flags_name = $hidden;
    }

    /**
     *  ТОТ САМЫЙ КОСТЫЛЬ
     *
     * Rewrite parent saveFile method without using Intervention/Image class
     *
     * @param UploadedFile $file
     * @param string $path
     * @param string $filename
     * @param array $settings
     * @return \Closure|File|array
     */
    public function saveFile(UploadedFile $file, $path, $filename, array $settings)
    {
        if (is_callable($callback = $this->getSaveCallback())) {
            return $callback($file, $path, $filename, $settings);
        }
        $file->move($path, $filename);

        //S3 Implement
        $value = $path.'/'.$filename;
        ImageOptimizer::Auto($value,true,false);
        return ['path' => asset($value), 'value' => $value];
    }

    /**
     * @return array
     */
    public function getValueFromModel()
    {
        //--------- get current images list --------------
        $images = parent::getValueFromModel();
        //--------- get unvisible images list --------------
        $model = $this->getModel();
        $name = $this->getName();
        $flags_name = $name . "_visibility";

        $hidden = $model->$flags_name;
        if (is_null($hidden)) {
            $hidden = [];
        }


        return ['images' => $images, 'hidden' => $hidden];
    }


}